#version 460

layout (local_size_x_id = 0) in;

layout (push_constant) uniform PushConstant {
    int kernelSize;
    float sigma2;
} pc;

layout (binding = 0) uniform texture2D srcTex;
layout (binding = 1) uniform sampler srcSampler;
layout (binding = 2, rgba8) uniform writeonly image2D dstImage;

const int MAX_HALF_KSIZE = 128;
const int GROUP_SIZE = 256;
const int SHARED_MEM_SIZE = GROUP_SIZE + 2 * MAX_HALF_KSIZE;
// Gathered Y for each X
shared vec4 gatheredY[SHARED_MEM_SIZE];
// Each thread should sample multiple times to fill up the `gatheredY`
const int ALIGNED_SHARED_MEM_SIZE = (SHARED_MEM_SIZE + (GROUP_SIZE - 1)) & ((~GROUP_SIZE) + 1);
const int SAMPLE_TIMES = ALIGNED_SHARED_MEM_SIZE / GROUP_SIZE;

void main() {
    const ivec2 dstIdx = ivec2(gl_GlobalInvocationID.xy);
    const ivec2 dstSize = imageSize(dstImage);

    const vec2 invDstSize = 1.0 / vec2(dstSize);
    const int halfKSize = pc.kernelSize / 2;

    const ivec2 groupTID = ivec2(gl_LocalInvocationID);
    const ivec2 groupID = ivec2(gl_WorkGroupID);
    const int srcStartX = groupID.x * GROUP_SIZE + groupTID.x - MAX_HALF_KSIZE;
    const int srcStartY = groupID.y;

    // Gather col cache for each `[srcStartX, srcStartX + GROUP_SIZE, srcStartX + 2*GROUP_SIZE, ...]` cols
    for (int x = 0; x < SAMPLE_TIMES; x++) {
        const int smemWriteX = GROUP_SIZE * x + groupTID.x;
        if (smemWriteX < SHARED_MEM_SIZE) {
            // Gather from `[srcStartY-halfKSize, srcStartY+halfKSise]` rows
            vec4 acc = vec4(0.0);
            float accWeight = 0.0;
            for (int y = -halfKSize; y <= halfKSize; y++) {
                const ivec2 iUv = ivec2(srcStartX + GROUP_SIZE * x, srcStartY + y);
                const vec2 uv = (vec2(iUv) + 0.5) * invDstSize;
                const vec4 srcVal = texture(sampler2D(srcTex, srcSampler), uv);
                const float weight = exp(-float(y * y) / pc.sigma2);
                acc += srcVal * weight;
                accWeight += weight;
            }
            gatheredY[smemWriteX] = acc / accWeight;
        }
    }

    // Never put the barrier after the divergence !!!
    barrier();

    if (dstIdx.x >= dstSize.x || dstIdx.y >= dstSize.y) {
        return;
    }

    // Calculate the final output by gathering cached cols
    vec4 acc = vec4(0.0);
    float accWeight = 0.0;
    for (int x = -halfKSize; x <= halfKSize; x++) {
        const float weight = exp(-float(x * x) / pc.sigma2);
        const int smemX = MAX_HALF_KSIZE + groupTID.x + x;
        const vec4 srcVal = gatheredY[smemX];
        acc += srcVal * weight;
        accWeight += weight;
    }
    const vec4 dstVal = acc / accWeight;

    imageStore(dstImage, dstIdx, vec4(dstVal.rgb, 1.0));
}
