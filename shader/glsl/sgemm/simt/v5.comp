// Float4

#version 460

#extension GL_EXT_control_flow_attributes : enable

layout (local_size_x_id = 0, local_size_y_id = 1) in;

layout (binding = 0, std430) readonly buffer SrcMatA { vec4 srcMatA[]; };
layout (binding = 1, std430) readonly buffer SrcMatB { vec4 srcMatB[]; };
layout (binding = 2, std430) writeonly buffer DstMat { vec4 dstMat[]; };

layout (constant_id = 2) const int M = 0;
layout (constant_id = 3) const int N = 0;
layout (constant_id = 4) const int K = 0;
layout (constant_id = 5) const int BLOCK_TILE_M = 128;
layout (constant_id = 6) const int BLOCK_TILE_N = 128;
layout (constant_id = 7) const int BLOCK_TILE_K = 128;

const int THREAD_TILE_M = int(BLOCK_TILE_M / gl_WorkGroupSize.y);
const int THREAD_TILE_N = int(BLOCK_TILE_N / gl_WorkGroupSize.x);
layout (constant_id = 8) const int THREAD_TILE_K = 8;
layout (constant_id = 9) const int STAGES = 2;

const ivec2 EXTENT_A = ivec2(BLOCK_TILE_K / 4, BLOCK_TILE_M);
const ivec2 EXTENT_B = ivec2(BLOCK_TILE_N / 4, BLOCK_TILE_K);
shared vec4 sharedA[STAGES][BLOCK_TILE_M][BLOCK_TILE_K / 4];
shared vec4 sharedB[STAGES][BLOCK_TILE_K][BLOCK_TILE_N / 4];

void zeroFillAccumulator(inout float regAccumulator[THREAD_TILE_M][THREAD_TILE_N]) {
    [[unroll]] for (int tm = 0; tm < THREAD_TILE_M; tm++) {
        [[unroll]] for (int tn = 0; tn < THREAD_TILE_N; tn++) {
            regAccumulator[tm][tn] = 0.f;
        }
    }
}

void loadGlobalToShared(ivec2 globalCoord, ivec2 globalExtent, int globalRowStride, bool loadA, int stage) {
    const ivec2 groupSize = ivec2(gl_WorkGroupSize.xy);
    const int localIndex = int(gl_LocalInvocationIndex);

    const int groupThreadCount = int(groupSize.x * groupSize.y);
    const int loadsPerThread = globalExtent.x * globalExtent.y / groupThreadCount;

    for (int i = 0; i < loadsPerThread; i++) {
        const int linearIdx = i * groupThreadCount + localIndex;
        const ivec2 srcOffset = ivec2(linearIdx % globalExtent.x, linearIdx / globalExtent.x);
        const ivec2 srcCoord = globalCoord + srcOffset;
        const int srcIndex = srcCoord.y * globalRowStride + srcCoord.x;

        const ivec2 dstCoord = srcOffset;
        if (loadA) {
            sharedA[stage][dstCoord.y][dstCoord.x] = srcMatA[srcIndex];
        } else {
            sharedB[stage][dstCoord.y][dstCoord.x] = srcMatB[srcIndex];
        }
    }
}

void computeWithShared(inout float regAccumulator[THREAD_TILE_M][THREAD_TILE_N], int stage) {
    const ivec2 localID = ivec2(gl_LocalInvocationID.xy);

    float regA[THREAD_TILE_K];// Only cache one row for row-major A
    float regB[THREAD_TILE_K][THREAD_TILE_N];// Cache the whole B

    const int threadSplitKCount = BLOCK_TILE_K / THREAD_TILE_K;
    for (int iThreadSplitK = 0; iThreadSplitK < threadSplitKCount; iThreadSplitK++) {
        // Load B
        const ivec2 sharedCoordB = ivec2(localID.x * THREAD_TILE_N / 4, iThreadSplitK * THREAD_TILE_K);
        [[unroll]] for (int tk = 0; tk < THREAD_TILE_K; tk++) {
            [[unroll]] for (int tn = 0; tn < THREAD_TILE_N / 4; tn++) {
                const vec4 sharedElem = sharedB[stage][sharedCoordB.y + tk][sharedCoordB.x + tn];
                regB[tk][tn * 4 + 0] = sharedElem.x;
                regB[tk][tn * 4 + 1] = sharedElem.y;
                regB[tk][tn * 4 + 2] = sharedElem.z;
                regB[tk][tn * 4 + 3] = sharedElem.w;
            }
        }

        // For each row in A
        const ivec2 sharedCoordA = ivec2(iThreadSplitK * THREAD_TILE_K / 4, localID.y * THREAD_TILE_M);
        [[unroll]] for (int tm = 0; tm < THREAD_TILE_M; tm++) {
            // Load A
            [[unroll]] for (int tk = 0; tk < THREAD_TILE_K / 4; tk++) {
                const vec4 sharedElem = sharedA[stage][sharedCoordA.y + tm][sharedCoordA.x + tk];
                regA[tk * 4 + 0] = sharedElem.x;
                regA[tk * 4 + 1] = sharedElem.y;
                regA[tk * 4 + 2] = sharedElem.z;
                regA[tk * 4 + 3] = sharedElem.w;
            }

            // Actual compute
            [[unroll]] for (int tn = 0; tn < THREAD_TILE_N; tn++) {
                [[unroll]] for (int tk = 0; tk < THREAD_TILE_K; tk++) {
                    regAccumulator[tm][tn] = fma(regA[tk], regB[tk][tn], regAccumulator[tm][tn]);
                }
            }
        }
    }
}

void storeAccumulator(inout float regAccumulator[THREAD_TILE_M][THREAD_TILE_N]) {
    const ivec2 globalID = ivec2(gl_GlobalInvocationID.xy);

    [[unroll]] for (int tm = 0; tm < THREAD_TILE_M; tm++) {
        [[unroll]] for (int tn = 0; tn < THREAD_TILE_N / 4; tn++) {
            const int globalRow = globalID.y * THREAD_TILE_M + tm;
            const int globalCol = globalID.x * THREAD_TILE_N / 4 + tn;
            const int dstIdx = globalRow * N / 4 + globalCol;
            const vec4 dstElem = vec4(regAccumulator[tm][tn * 4 + 0], regAccumulator[tm][tn * 4 + 1], regAccumulator[tm][tn * 4 + 2], regAccumulator[tm][tn * 4 + 3]);
            dstMat[dstIdx] = dstElem;
        }
    }
}

void main() {
    const ivec2 groupID = ivec2(gl_WorkGroupID.xy);

    // Accumulator
    float regAccumulator[THREAD_TILE_M][THREAD_TILE_N];
    zeroFillAccumulator(regAccumulator);

    // Prologue
    int stage = 0;
    const ivec2 globalCoordA = ivec2(0, groupID.y * BLOCK_TILE_M);
    loadGlobalToShared(globalCoordA, EXTENT_A, K / 4, true, stage);// Load A

    const ivec2 globalCoordB = ivec2(groupID.x * BLOCK_TILE_N / 4, 0);
    loadGlobalToShared(globalCoordB, EXTENT_B, N / 4, false, stage);// Load B
    barrier();

    // Main-loop
    const int blockSplitKCount = K / BLOCK_TILE_K;
    for (int iBlockSplitK = 1; iBlockSplitK < blockSplitKCount; iBlockSplitK++) {
        const int nextStage = (stage + 1) % STAGES;

        const ivec2 globalCoordA = ivec2(iBlockSplitK * BLOCK_TILE_K / 4, groupID.y * BLOCK_TILE_M);
        loadGlobalToShared(globalCoordA, EXTENT_A, K / 4, true, nextStage);// Load A

        const ivec2 globalCoordB = ivec2(groupID.x * BLOCK_TILE_N / 4, iBlockSplitK * BLOCK_TILE_K);
        loadGlobalToShared(globalCoordB, EXTENT_B, N / 4, false, nextStage);// Load B

        computeWithShared(regAccumulator, stage);
        barrier();

        stage = nextStage;
    }

    // Epilogue
    computeWithShared(regAccumulator, stage);

    // Store results
    storeAccumulator(regAccumulator);
}
