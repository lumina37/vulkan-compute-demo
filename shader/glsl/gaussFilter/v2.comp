#version 460

layout (local_size_x_id = 0, local_size_y_id = 1) in;

layout (push_constant) uniform PushConstant {
    int kernelSize;
    float sigma2;
} pc;

layout (binding = 0) uniform texture2D srcTex;
layout (binding = 1) uniform sampler srcSampler;
layout (binding = 2, rgba8) uniform writeonly image2D dstImage;

layout (constant_id = 2) const int MAX_HALF_KSIZE = 128;

const int GROUP_SIZE_X = int(gl_WorkGroupSize.x);
const int GROUP_SIZE_Y = int(gl_WorkGroupSize.y);
const int SHARED_MEM_SIZE_X = GROUP_SIZE_X + 2 * MAX_HALF_KSIZE;
const int ALIGNED_SHARED_MEM_SIZE = (SHARED_MEM_SIZE_X + (GROUP_SIZE_X - 1)) & ((~GROUP_SIZE_X) + 1);
// Each thread should sample multiple times across cols
const int SAMPLE_TIMES = ALIGNED_SHARED_MEM_SIZE / GROUP_SIZE_X;
// Each group will fillup `(OUTPUT_TIMES * GROUP_SIZE_Y) * GROUP_SIZE_X` (rows * cols) in dst
// Should be >= 2 for better performace
const int OUTPUT_TIMES = 4;

// Ping-pong cache for src
shared vec4 srcCache[GROUP_SIZE_Y * 2][ALIGNED_SHARED_MEM_SIZE];
// Gather multiple cols for each Y
shared vec4 gatheredX[GROUP_SIZE_Y * 4][GROUP_SIZE_X];

void main() {
    const ivec2 globalTID = ivec2(gl_GlobalInvocationID.xy);
    const ivec2 dstSize = imageSize(dstImage);

    const vec2 invDstSize = 1.0 / vec2(dstSize);
    const int halfKSize = pc.kernelSize / 2;

    const ivec2 groupTID = ivec2(gl_LocalInvocationID);
    const ivec2 groupID = ivec2(gl_WorkGroupID);

    // 0 - Fetch from global src into shared *ping* cache
    
}
