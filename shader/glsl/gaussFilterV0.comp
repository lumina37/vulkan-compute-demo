#version 460

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout (push_constant) uniform PushConstant {
    int kernelSize;
    float sigma2;
} pc;

layout (binding = 0) uniform texture2D srcTex;
layout (binding = 1) uniform sampler srcSampler;
layout (binding = 2, rgba8) uniform writeonly image2D dstImage;

void main() {
    ivec2 dstIdx = ivec2(gl_GlobalInvocationID.xy);
    ivec2 dstSize = imageSize(dstImage);
    if (dstIdx.x >= dstSize.x || dstIdx.y >= dstSize.y) {
        return;
    }

    vec2 invDstSize = 1.0 / vec2(dstSize);
    int halfKSize = pc.kernelSize / 2;

    vec4 color = vec4(0.0);
    float weightSum = 0.0;
    for (int y = -halfKSize; y <= halfKSize; y++) {
        for (int x = -halfKSize; x <= halfKSize; x++) {
            ivec2 offset = ivec2(x, y);
            ivec2 inCoord = dstIdx + offset;
            vec2 uv = (vec2(inCoord) + 0.5) * invDstSize;
            vec4 srcVal = texture(sampler2D(srcTex, srcSampler), (vec2(inCoord) + 0.5) * invDstSize);
            float weight = exp(-float(dot(offset, offset)) / pc.sigma2);
            color += srcVal * weight;
            weightSum += weight;
        }
    }
    color /= weightSum;

    imageStore(dstImage, dstIdx, vec4(color.rgb, 1.0));
}
