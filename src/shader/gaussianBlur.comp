#version 460

layout (local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;

layout (push_constant) uniform PushConstant {
    int kernelSize;
} pc;

layout (binding = 0) uniform sampler inSampler;
layout (binding = 1) uniform texture2D inTex;
layout (binding = 2, rgba8) uniform writeonly image2D outputImage;
layout (binding = 3) uniform UBO {
    vec4[16 / 4] weights;  // WARNING: forced 4bytes padding for each element in array
} ubo;

void main() {
    ivec2 outCoord = ivec2(gl_GlobalInvocationID.xy);

    ivec2 outSize = imageSize(outputImage);
    if (outCoord.x >= outSize.x || outCoord.y >= outSize.y) {
        return;
    }

    vec4 acc = vec4(0.0);
    int kSize = pc.kernelSize;
    int halfKSize = kSize / 2;

    for (int y = -halfKSize; y <= halfKSize; y++) {
        vec4 rowAcc = vec4(0.0);

        for (int x = -halfKSize; x <= halfKSize; x++) {
            ivec2 inCoord = outCoord + ivec2(x, y);
            vec4 srcVal = texture(sampler2D(inTex, inSampler), (vec2(inCoord) + 0.5) / vec2(outSize));
            int absX = abs(x);
            int weightY = absX >> 2;
            int weightX = absX & (4 - 1);
            float weight = ubo.weights[weightY][weightX];
            rowAcc += srcVal * weight;
        }

        int absY = abs(y);
        int weightY = absY >> 2;
        int weightX = absY & (4 - 1);
        float weight = ubo.weights[weightY][weightX];
        acc += rowAcc * weight;
    }

    imageStore(outputImage, outCoord, vec4(acc.rgb, 1.0));
}
