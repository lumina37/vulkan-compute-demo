#version 460

layout (local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;

layout (binding = 0) uniform sampler samp;
layout (binding = 1) uniform texture2D tex;
layout (binding = 2, rgba8) uniform writeonly image2D outputImage;

layout (push_constant, std430) uniform PushConstants {
    int kernelSize;
} pushConstants;

void main() {
    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);

    ivec2 imageSize = imageSize(outputImage);
    if (coord.x >= imageSize.x || coord.y >= imageSize.y) {
        return;
    }

    vec4 sum = vec4(0.0);
    int kernelSize = pushConstants.kernelSize;
    int halfKernel = kernelSize / 2;

    for (int offsetY = -halfKernel; offsetY <= halfKernel; offsetY++) {
        for (int offsetX = -halfKernel; offsetX <= halfKernel; offsetX++) {
            ivec2 sampleCoord = coord + ivec2(offsetX, offsetY);
            sum += textureLod(sampler2D(tex, samp), (vec2(sampleCoord) + 0.5) / vec2(imageSize), 0.0);
        }
    }

    float kernelArea = kernelSize * kernelSize;
    vec4 average = sum / kernelArea;

    imageStore(outputImage, coord, average);
}
